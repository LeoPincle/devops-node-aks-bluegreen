name: CI/CD AKS Blue-Green

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: hello-bluegreen
  RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
  LOCATION: ${{ secrets.LOCATION }}
  ACR_NAME: ${{ secrets.ACR_NAME }}
  AKS_NAME: ${{ secrets.AKS_NAME }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies and run tests
        run: |
          cd app
          npm ci
          npm test

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init/Apply (ensure infra)
        working-directory: terraform
        run: |
          set -e
          terraform init -input=false
          terraform apply -auto-approve -input=false \
            -var="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" \
            -var="location=${{ env.LOCATION }}" \
            -var="acr_name=${{ env.ACR_NAME }}" \
            -var="aks_name=${{ env.AKS_NAME }}"

      - name: Build & Push image to ACR
        id: acr
        run: |
          set -e
          ACR_LOGIN_SERVER=$(az acr show -n "${{ env.ACR_NAME }}" -g "${{ env.RESOURCE_GROUP_NAME }}" --query loginServer -o tsv)
          IMAGE_TAG="${{ github.run_number }}"
          az acr build --registry "${{ env.ACR_NAME }}" --image "${{ env.IMAGE_NAME }}:${IMAGE_TAG}" .
          echo "acr=${ACR_LOGIN_SERVER}" >> $GITHUB_ENV
          echo "tag=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Publish build outputs
        run: |
          echo "ACR: ${{ env.acr }}"
          echo "TAG: ${{ env.tag }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RESOURCE_GROUP_NAME }}
          cluster-name:   ${{ env.AKS_NAME }}

      - name: Install Helm
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Ensure prod namespace exists
        run: |
          kubectl get ns prod >/dev/null 2>&1 || kubectl create ns prod

      - name: Install NGINX Ingress
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace prod --create-namespace \
            --set controller.service.type=LoadBalancer

      - name: Decide target color (blue/green)
        id: color
        run: |
          set -e
          ACTIVE=$(kubectl get ingress app-router -n prod -o jsonpath='{.spec.rules[0].http.paths[0].backend.service.name}' 2>/dev/null || echo "none")
          echo "Active: $ACTIVE"
          if [ "$ACTIVE" = "myapp-blue" ]; then
            echo "target=green" >> $GITHUB_ENV
            echo "idle=myapp-green" >> $GITHUB_ENV
          else
            echo "target=blue" >> $GITHUB_ENV
            echo "idle=myapp-blue" >> $GITHUB_ENV
          fi

      - name: Deploy to idle color
        run: |
          set -e
